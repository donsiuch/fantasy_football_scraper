#!/usr/bin/env python3

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager
import json
import csv
import smtplib
import mimetypes
from pathlib import Path
from email.message import EmailMessage

class Mail():
    
    SENDER_EMAIL = ""

    PASSWORD = ""

    DISCLAIMER = "\n\nThis email was autogenerated by the Fantasy Football Scraper."

    def __init__(self):

        with open('sender_email.txt', 'r') as f:
            self.SENDER_EMAIL = f.read().strip()    
        
        with open('password.txt', 'r') as f:
            self.PASSWORD = f.read().strip()    

    def send_mail(self, receiver_email, subject, body, attachments_list):

        message = EmailMessage()
        message.set_content(body + self.DISCLAIMER)
        message['Subject'] = subject
        message['From'] = self.SENDER_EMAIL
        message['To'] = receiver_email

        for file in attachments_list:
            
            path = Path(file)
            if not path.exists():
                raise FileNotFoundError(f"Attachment does not exist: {file_path}")

            # Guess MIME type and encoding
            mime_type, _ = mimetypes.guess_type(path)
            maintype, subtype = mime_type.split('/') if mime_type else ('application', 'octet-stream')

            with open(path, "rb") as f:
                file_data = f.read()

            message.add_attachment(file_data, maintype=maintype, subtype=subtype, filename=path.name)

        try:
            # Establish a connection to Gmail's SMTP server
            with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
                server.login(self.SENDER_EMAIL, self.PASSWORD)
                server.send_message(message)
                print("Email sent successfully to [{}]".format(receiver_email))
        except Exception as e:
            print(f"Error sending email: {e}")

def WebsiteFactory(website):
    
    if website == "yahoo":
        return YahooNFL()

    return None

def PlayerFactory(positionId):

    if positionId == "Receiving":
        return Receiver()

    if positionId == "Rushing":
        return RunningBack()

    return None

def StatsFactory(positionId):
    
    if positionId == "Receiving":
        return ReceivingStats()
    
    if positionId == "Rushing":
        return RushingStats()

    return None

class Player():

    positionId = ""
    url = ""

    def to_string(self):
        print(f"""
            {self.stats_dictionary}
        """)

    def get_stats_dictionary(self):
        return self.stats_dictionary

    def extract_data_from_json_dicts(self, data):

        self.stats_dictionary['PLAYER'] = data["player"]["displayName"]
        self.stats_dictionary['TEAM'] = data["player"]["team"]["displayName"]
        self.positionId = data["player"]["positions"][0]["positionId"]
        self.url = data["player"]["alias"]["url"]

        for stat in data['stats']:
            statId = stat["statId"]
            self.stats_dictionary[statId] = stat["value"] if stat["value"] is not None else 0

        # debugging
        #self.to_string()

class RushingStats():

    json_keyword = "RUSHING_YARDS"

    stats_dictionary = { 
        "PLAYER" : "",
        "TEAM" : "",
        "RUSHING_ATTEMPTS" : -1,
        "RUSHING_YARDS" : -1,
        "RUSHING_YARDS_PER_ATTEMPT" : -1,
        "RUSHING_TOUCHDOWNS" : -1,
        "RUSHING_FIRST_DOWNS" : -1,
        "LONGEST_RUSH" : -1,
        "FUMBLES" : -1,
        "FUMBLES_LOST" : -1
    }

class ReceivingStats():

    json_keyword = "RECEIVING_YARDS"

    stats_dictionary = { 
        "PLAYER" : "",
        "TEAM" : "",
        "RECEPTIONS" : -1,
        "TARGETS" : -1,
        "RECEIVING_YARDS" : -1,
        "RECEIVING_YARDS_PER_RECEPTION" : -1,
        "LONGEST_RECEPTION" : -1,
        "RECEIVING_FIRST_DOWNS" : -1,
        "RECEIVING_TOUCHDOWNS" : -1,
        "FUMBLES" : -1,
        "FUMBLES_LOST" : -1
    }

class Receiver(Player, ReceivingStats):
    def __init__(self):
        pass

class RunningBack(Player, RushingStats):
    def __init__(self):
        pass
   


class YahooNFL():

    csv_file_list = []

    def find_key_recursive(self, d, key):
        if isinstance(d, dict):
            if key in d:
                return d[key]
            for k, v in d.items():
                result = self.find_key_recursive(v, key)
                if result is not None:
                    return result
        elif isinstance(d, list):
            for item in d:
                result = self.find_key_recursive(item, key)
                if result is not None:
                    return result
        return None

    def email_csvs(self):

        email = Mail()
        
        with open('email_list.json') as f:

            email_list = json.load(f)
            
            for email_address in email_list['recipients']:
                email.send_mail(email_address, 
                    "Fantasy Football Scrape Results",
                    "CSVs are attached.",
                    self.csv_file_list)

    def scrape_stats(self):

        # Optional: run headless (no GUI)
        options = Options()
        
        # Wait for DOMContentLoaded (don't wait for the whole page to load)
        # without this the page loads, but never finishes and the driver.get(url) times out
        options.page_load_strategy = 'eager'

        options.add_argument('--headless=new')  # Uncomment for headless mode
        options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/115.0 Safari/537.36")

        """
        # Use a common browser user agent string
        user_agent = (
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
            "(KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
        )

        options.add_argument(f"user-agent={user_agent}")
        """
        # Optional: speed it up
        # TODO: Is this really necessary?
        #options.add_argument("--disable-blink-features=AutomationControlled")
        #options.add_argument("--no-sandbox")
        #options.add_argument("--disable-dev-shm-usage")

        service = Service(ChromeDriverManager().install()) 
        driver = webdriver.Chrome(service=service, options=options)

        try:
            # Load the Yahoo Sports NFL stats page (or other target)
            url = "https://sports.yahoo.com/nfl/stats/weekly"
            print(f"driver.get({url})")
            driver.get(url)
            print("Finished.")

            # Wait for JS to load and populate root.App
            #time.sleep(5)  # Adjust as needed, or use WebDriverWait for reliability
            WebDriverWait(driver, timeout=15).until(
                lambda d: d.execute_script("return typeof window.App?.main !== 'undefined';")
            )

            # Use JavaScript to access the embedded object
            app_data = driver.execute_script("return window.App?.main;")

            keyword = ["Rushing", "Receiving"]

            for key in keyword:

                receiving_data = self.find_key_recursive(app_data, "weeklyStatsFootball" + key)

                stats_data = StatsFactory(key)
                
                receiving = (receiving_data
                    .get("nfl", {})
                    .get("200", {})
                    .get("2025", {})
                    .get("1", {})
                    .get("PRESEASON", {})
                    .get("", {})
                    .get(stats_data.json_keyword, {})
                )

                #
                # Debugging: This dumps the data
                #
                if app_data:
                    with open("app_main.json", "w") as f:
                        json.dump(receiving, f, indent=2)
                    print("App data saved to app_main.json")
                else:
                    print("App.main not found.")

                leaders = receiving["leagues"][0]["leagueWeeks"][0]["leaders"]

                csv_filename = "{}_stats.csv".format(key)
                with open(csv_filename, mode='w', newline='') as file:

                    dictionary = stats_data.stats_dictionary

                    # Write header
                    writer = csv.DictWriter(file, fieldnames = list(dictionary.keys()))
                    writer.writeheader()

                    for leader in leaders:
                        player = PlayerFactory(key)
                        player.extract_data_from_json_dicts(leader)
                        print(player.get_stats_dictionary())
                        writer.writerows([player.get_stats_dictionary()])

                self.csv_file_list.append(csv_filename)

        finally:
            driver.quit()

class Program():

    def work_loop(self):

        website = WebsiteFactory("yahoo")

        website.scrape_stats()

        website.email_csvs()

    def main(self):
        
        self.work_loop()
        

if __name__ == "__main__":

    p = Program()

    p.main()

